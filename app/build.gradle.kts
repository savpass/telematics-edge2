/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.9/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("java-library")
    id("java")
    id("checkstyle")
    id("jacoco")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib", "1.8.0")) // Use the same version across dependencies

    // JUnit 5 (JUnit Jupiter)
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.0")

    // Kotlin Test (Kotlin Test Framework)
    testImplementation("org.jetbrains.kotlin:kotlin-test:1.8.0")

    // Guava library
    implementation("com.google.guava:guava:31.0.1-jre") // Use a specific version for Guava

    // JUnit 4 (if needed, otherwise remove)
    testImplementation("junit:junit:4.13.2")
}


// Apply a specific Java toolchain to ease working on different environments.
java {
      toolchain {
        languageVersion.set(JavaLanguageVersion.of(11)) // Set the Java language version to 11
    }
}

application {
     mainClass.set("org.example.App")
}

version = "1.2.1"

sourceSets {
    main {
        java {
            srcDirs("src/main/java")
        }
    }
}

tasks.test {
    useJUnitPlatform() // Use this line if you're using JUnit 5
    finalizedBy(tasks.jacocoTestReport) // Ensure the report is generated after tests

   include("**/SimpleTest*.class")
   include("**/SimpleTest*.class")
   include("**/AppTest*.class")

}

checkstyle {
    toolVersion = "10.12.2" // Use the latest version available
    configFile = file("config/checkstyle/checkstyle.xml")

    sourceSets = listOf(project.sourceSets.getByName("main"))
}




jacoco {
    toolVersion = "0.8.8" // Use the latest version available
}

tasks.jacocoTestReport {
    dependsOn(tasks.test) // Make sure tests are run before generating the report
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}


tasks.register<JacocoReport>("jacocoMainReport") {
    dependsOn(tasks.classes) // Ensure classes are compiled

    // Set the source set to be covered
    sourceSets(sourceSets.main.get())

    // Define the reports to be generated
    reports {
        xml.required.set(true)
        html.required.set(true)
    }

    // Set the execution data from the Jacoco agent
    executionData(fileTree(buildDir).include("jacoco/*.exec"))
}
